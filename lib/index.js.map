{"mappings":";;;;;;;;;;AAAA;AAKO,SAAS,0CACf,eAAwB;IAAC;IAAU;CAAa,EAC/C;IACD,uEAAuE;IACvE,OAAO,CAAA,GAAA,kDAAO,EAAE,SAAU,WAAE,QAAO,UAAE,OAAM,EAAE,EAAE;QAC9C,MAAM,WAAW;QACjB,8EAA8E;QAC9E,MAAM,iBAAiB,aAAa,QAAQ,CAAC,YAC1C,OAAO,OAAO,CAAC,SAAS,KAAK,EAAE,UAAU,CAAC,GACzC,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAClB,OAAO,UAAU,WACd,OAAO,OAAO,CAAC,OAAO,GAAG,CACzB,CAAC,CAAC,WAAW,WAAW,GACvB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,WAAW,CAAC,CAAC,IAE/C;gBAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;aAAC,EAEjC,IAAI,KACL,EAAE;QAEL,6EAA6E;QAC7E,MAAM,gBAAgB,aAAa,QAAQ,CAAC,gBACzC,OAAO,OAAO,CAAC,SAAS,KAAK,EAAE,YAAY,CAAC,GAC3C,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAClB,OAAO,UAAU,WACd;gBAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,MAAM,CAAC;aAAC,GAC5B;gBACA,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;mBAC3B,OAAO,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,CAC9B,CAAC,CAAC,WAAW,WAAW,GACvB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,WAAW,CAAC,CAAC;aAE9C,EAEJ,IAAI,KACL,EAAE;QAEL,wDAAwD;QACxD,MAAM,eAAe;eAAI;eAAmB;SAAc,CAAC,IAAI,CAAC;QAEhE,QAAQ;YACP,SAAS,CAAC;QACL,EAAE,aAAa;OAChB,CAAC;QACN;IACD;AACD","sources":["src/lib.ts"],"sourcesContent":["import type { Config } from \"tailwindcss\";\nimport { default as TWPlugin } from \"tailwindcss/plugin\";\n\ntype Kinds = \"colors\" | \"font-sizes\";\n\nexport function tailwindCssVariables(\n\tdisplayKinds: Kinds[] = [\"colors\", \"font-sizes\"]\n) {\n\t// Return the plugin function that adds the CSS variables to the styles\n\treturn TWPlugin(function ({ addBase, config }) {\n\t\tconst twConfig = config();\n\t\t// Generate CSS variables for all of the colors defined in the Tailwind config\n\t\tconst colorVariables = displayKinds.includes(\"colors\")\n\t\t\t? Object.entries(twConfig.theme?.colors ?? {})\n\t\t\t\t\t.map(([name, value]) =>\n\t\t\t\t\t\ttypeof value === \"object\"\n\t\t\t\t\t\t\t? Object.entries(value).map(\n\t\t\t\t\t\t\t\t\t([childName, childValue]) =>\n\t\t\t\t\t\t\t\t\t\t`--color-${name}-${childName}: ${childValue};`\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: [`--color-${name}: ${value};`]\n\t\t\t\t\t)\n\t\t\t\t\t.flat()\n\t\t\t: [];\n\n\t\t// Generate CSS variables for all of the sizes defined in the Tailwind config\n\t\tconst sizeVariables = displayKinds.includes(\"font-sizes\")\n\t\t\t? Object.entries(twConfig.theme?.fontSize ?? {})\n\t\t\t\t\t.map(([name, value]) =>\n\t\t\t\t\t\ttypeof value === \"string\"\n\t\t\t\t\t\t\t? [`--size-${name}: ${value}`]\n\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t`--size-${name}: ${value[0]};`,\n\t\t\t\t\t\t\t\t\t...Object.entries(value[1]).map(\n\t\t\t\t\t\t\t\t\t\t([childName, childValue]) =>\n\t\t\t\t\t\t\t\t\t\t\t`--size-${name}-${childName}: ${childValue};`\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t)\n\t\t\t\t\t.flat()\n\t\t\t: [];\n\n\t\t// Combine all of the CSS variables into a single string\n\t\tconst cssVariables = [...colorVariables, ...sizeVariables].join(\"\\n\");\n\n\t\taddBase({\n\t\t\t\":root\": `{\n        ${cssVariables}\n      }`,\n\t\t});\n\t});\n}\n"],"names":[],"version":3,"file":"index.js.map"}