{"mappings":";;;;;;;;;;AAAA;AAKO,SAAS,0CACf,eAAwB;IAAC;IAAU;CAAa,EAC/C;IACD,uEAAuE;IACvE,OAAO,CAAA,GAAA,kDAAO,EAAE,SAAU,WAAE,QAAO,UAAE,OAAM,EAAE,EAAE;QAC9C,MAAM,WAAW;QAEjB,IAAI,kBAAkB,CAAC;QAEvB,8EAA8E;QAC9E,IAAI,aAAa,QAAQ,CAAC,WACzB,kBAAkB;YACjB,GAAG,eAAe;YAClB,GAAG,OAAO,OAAO,CAAC,SAAS,KAAK,EAAE,UAAU,CAAC,GAC3C,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAClB,OAAO,UAAU,WACd,OAAO,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,WAAW,WAAW,GAAM,CAAA;wBACxD,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE;oBAClC,CAAA,KACA;oBACA;wBACC,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,EAAE;oBACtB;iBACC,EAEJ,IAAI,GACJ,MAAM,CAAC,CAAC,KAAK,MAAS,CAAA;oBAAE,GAAG,GAAG;oBAAE,GAAG,GAAG;gBAAC,CAAA,GAAI,CAAC,EAAE;QACjD;QAGD,6EAA6E;QAC7E,IAAI,aAAa,QAAQ,CAAC,eACzB,kBAAkB;YACjB,GAAG,eAAe;YAClB,GAAG,OAAO,OAAO,CAAC,SAAS,KAAK,EAAE,YAAY,CAAC,GAC7C,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAClB,OAAO,UAAU,WACd;oBACA,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE;gBACpB,IACA;oBACA;wBACC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;oBAC7B;uBACG,OAAO,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,CAC9B,CAAC,CAAC,WAAW,WAAW,GAAM,CAAA;4BAC7B,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE;wBAClC,CAAA;iBAEA,EAEJ,IAAI,GACJ,MAAM,CAAC,CAAC,KAAK,MAAS,CAAA;oBAAE,GAAG,GAAG;oBAAE,GAAG,GAAG;gBAAC,CAAA,GAAI,CAAC,EAAE;QACjD;QAGD,QAAQ;YACP,SAAS;QACV;IACD;AACD","sources":["src/lib.ts"],"sourcesContent":["import type { Config } from \"tailwindcss\";\nimport { default as TWPlugin } from \"tailwindcss/plugin\";\n\ntype Kinds = \"colors\" | \"font-sizes\";\n\nexport function tailwindCssVariables(\n\tdisplayKinds: Kinds[] = [\"colors\", \"font-sizes\"]\n) {\n\t// Return the plugin function that adds the CSS variables to the styles\n\treturn TWPlugin(function ({ addBase, config }) {\n\t\tconst twConfig = config();\n\n\t\tlet cssVariablesObj = {};\n\n\t\t// Generate CSS variables for all of the colors defined in the Tailwind config\n\t\tif (displayKinds.includes(\"colors\")) {\n\t\t\tcssVariablesObj = {\n\t\t\t\t...cssVariablesObj,\n\t\t\t\t...Object.entries(twConfig.theme?.colors ?? {})\n\t\t\t\t\t.map(([name, value]) =>\n\t\t\t\t\t\ttypeof value === \"object\"\n\t\t\t\t\t\t\t? Object.entries(value).map(([childName, childValue]) => ({\n\t\t\t\t\t\t\t\t\t[`--color-${name}-${childName}`]: childValue,\n\t\t\t\t\t\t\t  }))\n\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t[`--color-${name}`]: value,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t)\n\t\t\t\t\t.flat()\n\t\t\t\t\t.reduce((acc, cur) => ({ ...acc, ...cur }), {}),\n\t\t\t};\n\t\t}\n\n\t\t// Generate CSS variables for all of the sizes defined in the Tailwind config\n\t\tif (displayKinds.includes(\"font-sizes\")) {\n\t\t\tcssVariablesObj = {\n\t\t\t\t...cssVariablesObj,\n\t\t\t\t...Object.entries(twConfig.theme?.fontSize ?? {})\n\t\t\t\t\t.map(([name, value]) =>\n\t\t\t\t\t\ttypeof value === \"string\"\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t[`--size-${name}`]: value,\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t[`--size-${name}`]: value[0],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t...Object.entries(value[1]).map(\n\t\t\t\t\t\t\t\t\t\t([childName, childValue]) => ({\n\t\t\t\t\t\t\t\t\t\t\t[`--size-${name}-${childName}`]: childValue,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t)\n\t\t\t\t\t.flat()\n\t\t\t\t\t.reduce((acc, cur) => ({ ...acc, ...cur }), {}),\n\t\t\t};\n\t\t}\n\n\t\taddBase({\n\t\t\t\":root\": cssVariablesObj,\n\t\t});\n\t});\n}\n"],"names":[],"version":3,"file":"index.js.map"}